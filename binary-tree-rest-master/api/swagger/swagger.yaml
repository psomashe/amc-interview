swagger: "2.0"
info:
  version: 0.0.1
  title: Binary Tree API
  description: This is a basic REST API for binary search tree data structure.
# during dev, should point to your local machine
host: localhost:10010
# basePath prefixes all resource paths 
basePath: /
# 
schemes:
  - http

paths:
  /tree/doc:
    x-swagger-router-controller: tree
    get:
      operationId: getDoc
      produces:
        - text/html
      responses:
        '200':
          description: API documentation
          schema:
            type: file
            format: text/html
  /tree/populate:
    x-swagger-router-controller: tree
    get:
      operationId: getPopulate
      produces:
        - text/html
      responses:
        '200':
          description: Populates tree with the predifned data
          schema:
            type: file
            format: text/html
    post:
      operationId: populateTree
      consumes:
        - application/x-www-form-urlencoded
      parameters:
        - name: numbers
          in: formData
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: string
  /tree:
    x-swagger-router-controller: tree
    post:
      operationId: addNode
      description: Adds an integer value to the tree
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
        - text/plain
      parameters:
        - name: number
          description: Integer value to add
          in: formData
          required: true
          type: integer
      responses:
        '200':
          description: New or existing node containing the value
          schema:
            $ref: '#/definitions/node'
        '400':
          description: Invalid value supplied
  /tree/root:
    x-swagger-router-controller: tree
    get:
      operationId: getRootNode
      description: Returns root node, if exists
      produces:
        - application/json
        - text/plain
      responses:
        '200':
          description: Tree root
          schema:
            $ref: '#/definitions/node'
        '204':
          description: No root exists
  /tree/{id}:
    x-swagger-router-controller: tree
    get:
      operationId: getNodeByID
      description: Returns tree node by ID
      produces:
        - application/json
        - text/plain
      parameters:
        - name: id
          in: path
          description: ID of node to fetch
          required: true
          type: integer
      responses:
        '200':
          description: Tree node with the specified ID
          schema:
            $ref: '#/definitions/node'
        '400':
          description: Invalid ID supplied
        '404':
          description: Node not found
  /tree/find:
    x-swagger-router-controller: tree
    get:
      operationId: findNode
      description: Get tree nodes by searching by parent ID or node value
      produces:
        - application/json
        - text/plain
      parameters:
        - name: parentId
          description: Returns all nodes whose parent has the specified ID
          in: query
          required: false
          type: integer
        - name: number
          description: Returns node with the specified value
          in: query
          required: false
          type: integer
      responses:
        '200':
          description: Tree nodes satisfying search criteria or empty array if there are none
          schema:
            type: array
            items:
              $ref: '#/definitions/node'
          
  /swagger:
    x-swagger-pipe: swagger_raw
# complex objects have schema definitions
definitions:
  node:
    type: object
    description: Represents tree node
    required:
      - id
      - number
    properties:
      id:
        type: integer
        description: Unique node ID
      number:
        type: integer
        description: Numeric value stored in the node
      parentId:
        type: integer
        description: Node parent ID
